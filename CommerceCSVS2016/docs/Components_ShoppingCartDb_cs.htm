<font size="3">
<pre>
<font color= "blue">using</font> System;
<font color= "blue">using</font> System.Configuration;
<font color= "blue">using</font> System.Data;
<font color= "blue">using</font> System.Data.SqlClient;

<font color= "blue">namespace</font> ASPNET.StarterKit.Commerce {

    <font color= "green">//*******************************************************</font>
    <font color= "green">//</font>
    <font color= "green">// ShoppingCartDB Class</font>
    <font color= "green">//</font>
    <font color= "green">// Business/Data Logic Class that encapsulates all data</font>
    <font color= "green">// logic necessary to add/remove/update/purchase items</font>
    <font color= "green">// within an Commerce Starter Kit shopping cart.</font>
    <font color= "green">//</font>
    <font color= "green">//*******************************************************</font>

    <font color= "blue">public</font> <font color= "blue">class</font> ShoppingCartDB {

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.GetItems() Method &lt;a name=&quot;GetItems&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The GetItems method returns a struct containing</font>
        <font color= "green">// a forward-only, read-only DataReader.  This displays a list of all</font>
        <font color= "green">// items within a shopping cart. The SQLDataReaderResult struct</font>
        <font color= "green">// also returns the SQL connection, which must be explicitly closed</font>
        <font color= "green">// after the data from the DataReader is bound into the controls.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartList.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartList Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> SqlDataReader GetItems(<font color= "blue">string</font> cartID) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartList&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter parameterCartID = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            parameterCartID.Value = cartID;
            myCommand.Parameters.Add(parameterCartID);

            <font color= "green">// Execute the command</font>
            myConnection.Open();
            SqlDataReader result = myCommand.ExecuteReader(CommandBehavior.CloseConnection);

            <font color= "green">// Return the datareader result</font>
            <font color= "blue">return</font> result;
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.AddItem() Method &lt;a name=&quot;AddItem&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The AddItem method adds an item into a shopping cart.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartAddItem.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartAddItem Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> <font color= "blue">void</font> AddItem(<font color= "blue">string</font> cartID, <font color= "blue">int</font> productID, <font color= "blue">int</font> quantity) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartAddItem&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter parameterProductID = <font color= "blue">new</font> SqlParameter(&quot;@ProductID&quot;, SqlDbType.Int, 4);
            parameterProductID.Value = productID;
            myCommand.Parameters.Add(parameterProductID);

            SqlParameter parameterCartID = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            parameterCartID.Value = cartID;
            myCommand.Parameters.Add(parameterCartID);

            SqlParameter parameterQuantity = <font color= "blue">new</font> SqlParameter(&quot;@Quantity&quot;, SqlDbType.Int, 4);
            parameterQuantity.Value = quantity;
            myCommand.Parameters.Add(parameterQuantity);

            <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.UpdateItem() Method &lt;a name=&quot;UpdateItem&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The UpdateItem method updates the quantity of an item</font>
        <font color= "green">// in a shopping cart.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartUpdate.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartUpdate Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> <font color= "blue">void</font> UpdateItem(<font color= "blue">string</font> cartID, <font color= "blue">int</font> productID, <font color= "blue">int</font> quantity) {

            <font color= "green">// throw an exception if quantity is a negative number</font>
            <font color= "blue">if</font> (quantity &lt; 0) {
                throw <font color= "blue">new</font> Exception(&quot;Quantity cannot be a negative number&quot;);
            }

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartUpdate&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter parameterProductID = <font color= "blue">new</font> SqlParameter(&quot;@ProductID&quot;, SqlDbType.Int, 4);
            parameterProductID.Value = productID;
            myCommand.Parameters.Add(parameterProductID);

            SqlParameter parameterCartID = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            parameterCartID.Value = cartID;
            myCommand.Parameters.Add(parameterCartID);

            SqlParameter parameterQuantity = <font color= "blue">new</font> SqlParameter(&quot;@Quantity&quot;, SqlDbType.Int, 4);
            parameterQuantity.Value = quantity;
            myCommand.Parameters.Add(parameterQuantity);

            <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.RemoveItem() Method &lt;a name=&quot;RemoveItem&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The RemoveItem method removes an item from a</font>
        <font color= "green">// shopping cart.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartRemoveItem.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartRemoveItem Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> <font color= "blue">void</font> RemoveItem(<font color= "blue">string</font> cartID, <font color= "blue">int</font> productID) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartRemoveItem&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter parameterProductID = <font color= "blue">new</font> SqlParameter(&quot;@ProductID&quot;, SqlDbType.Int, 4);
            parameterProductID.Value = productID;
            myCommand.Parameters.Add(parameterProductID);

            SqlParameter parameterCartID = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            parameterCartID.Value = cartID;
            myCommand.Parameters.Add(parameterCartID);

            <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.GetItemCount() Method &lt;a name=&quot;GetItemCount&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The GetItemCount method returns the number of items</font>
        <font color= "green">// within a shopping cart.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartItemCount.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartItemCount Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> <font color= "blue">int</font> GetItemCount(<font color= "blue">string</font> cartID) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartItemCount&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            SqlParameter parameterCartID = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            parameterCartID.Value = cartID;
            myCommand.Parameters.Add(parameterCartID);

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter parameterItemCount = <font color= "blue">new</font> SqlParameter(&quot;@ItemCount&quot;, SqlDbType.Int, 4);
            parameterItemCount.Direction = ParameterDirection.Output;
            myCommand.Parameters.Add(parameterItemCount);

            <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();

            <font color= "green">// Return the ItemCount (obtained as out paramter of SPROC)</font>
            <font color= "blue">return</font> ((<font color= "blue">int</font>)parameterItemCount.Value);
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.GetTotal() Method &lt;a name=&quot;GetTotal&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The GetTotal method returns the total price of all</font>
        <font color= "green">// items within the shopping cart.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartTotal.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartTotal Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> decimal GetTotal(<font color= "blue">string</font> cartID) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartTotal&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter parameterCartID = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            parameterCartID.Value = cartID;
            myCommand.Parameters.Add(parameterCartID);

            SqlParameter parameterTotalCost = <font color= "blue">new</font> SqlParameter(&quot;@TotalCost&quot;, SqlDbType.Money, 8);
            parameterTotalCost.Direction = ParameterDirection.Output;
            myCommand.Parameters.Add(parameterTotalCost);

            <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();

            <font color= "green">// Return the Total</font>
            <font color= "blue">if</font> (parameterTotalCost.Value.ToString() != &quot;&quot;) {
                <font color= "blue">return</font> (decimal)parameterTotalCost.Value;
            }
            <font color= "blue">else</font> {
                <font color= "blue">return</font> 0;
            }
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.MigrateCart() Method &lt;a name=&quot;MigrateCart&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The MigrateCart method migrates the items from one</font>
        <font color= "green">// cartId to another.  This is used during the login</font>
        <font color= "green">// and/or registration process to transfer a user's</font>
        <font color= "green">// temporary cart items to a permanent account.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartMigrate.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartMigrate Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> <font color= "blue">void</font> MigrateCart(String oldCartId, String newCartId) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartMigrate&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter cart1 = <font color= "blue">new</font> SqlParameter(&quot;@OriginalCartId &quot;, SqlDbType.NVarChar, 50);
            cart1.Value = oldCartId;
            myCommand.Parameters.Add(cart1);

            SqlParameter cart2 = <font color= "blue">new</font> SqlParameter(&quot;@NewCartId &quot;, SqlDbType.NVarChar, 50);
            cart2.Value = newCartId;
            myCommand.Parameters.Add(cart2);

             <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.EmptyCart() Method &lt;a name=&quot;EmptyCart&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The EmptyCart method removes all current items within</font>
        <font color= "green">// the shopping cart.</font>
        <font color= "green">//</font>
        <font color= "green">// Other relevant sources:</font>
        <font color= "green">//     + &lt;a href=&quot;ShoppingCartEmpty.htm&quot; style=&quot;color:green&quot;&gt;ShoppingCartEmpty Stored Procedure&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> <font color= "blue">void</font> EmptyCart(<font color= "blue">string</font> cartID) {

            <font color= "green">// Create Instance of Connection and Command Object</font>
            SqlConnection myConnection = <font color= "blue">new</font> SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;]);
            SqlCommand myCommand = <font color= "blue">new</font> SqlCommand(&quot;CMRC_ShoppingCartEmpty&quot;, myConnection);

            <font color= "green">// Mark the Command as a SPROC</font>
            myCommand.CommandType = CommandType.StoredProcedure;

            <font color= "green">// Add Parameters to SPROC</font>
            SqlParameter cartid = <font color= "blue">new</font> SqlParameter(&quot;@CartID&quot;, SqlDbType.NVarChar, 50);
            cartid.Value = cartID;
            myCommand.Parameters.Add(cartid);

            <font color= "green">// Open the connection and execute the Command</font>
            myConnection.Open();
            myCommand.ExecuteNonQuery();
            myConnection.Close();
        }

        <font color= "green">//*******************************************************</font>
        <font color= "green">//</font>
        <font color= "green">// ShoppingCartDB.GetShoppingCartId() Method &lt;a name=&quot;GetShoppingCartId&quot;&gt;&lt;/a&gt;</font>
        <font color= "green">//</font>
        <font color= "green">// The GetShoppingCartId method is used to calculate the</font>
        <font color= "green">// &quot;ShoppingCart&quot; ID key used <font color= "blue">for</font> a tracking a browser.</font>
        <font color= "green">//</font>
        <font color= "green">// The ShoppingCartID value is either the User's Identity</font>
        <font color= "green">// Name (if they are a registered and authenticated user),</font>
        <font color= "green">// or a random GUID calculated for guest visitors or</font>
        <font color= "green">// customers who have not yet logged in.</font>
        <font color= "green">//</font>
        <font color= "green">//*******************************************************</font>

        <font color= "blue">public</font> String GetShoppingCartId() {

            <font color= "green">// Obtain current HttpContext of ASP+ Request</font>
            System.Web.HttpContext context = System.Web.HttpContext.Current;

            <font color= "green">// If the user is authenticated, use their customerId as a permanent shopping cart id</font>
            <font color= "blue">if</font> (context.User.Identity.Name != &quot;&quot;) {
                <font color= "blue">return</font> context.User.Identity.Name;
            }

            <font color= "green">// If user is not authenticated, either fetch (or issue) a new temporary cartID</font>
            <font color= "blue">if</font> (context.Request.Cookies[&quot;ASPNETCommerce_CartID&quot;] != <font color= "blue">null</font>) {
                <font color= "blue">return</font> context.Request.Cookies[&quot;ASPNETCommerce_CartID&quot;].Value;
            }
            <font color= "blue">else</font> {
                <font color= "green">// Generate a new random GUID using System.Guid Class</font>
                Guid tempCartId = Guid.NewGuid();

                <font color= "green">// Send tempCartId back to client as a cookie</font>
                context.Response.Cookies[&quot;ASPNETCommerce_CartID&quot;].Value = tempCartId.ToString();

                <font color= "green">// Return tempCartId</font>
                <font color= "blue">return</font> tempCartId.ToString();
            }
        }
    }
}
</pre></font>
